// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(SwiftBusDataContext))]
    [Migration("20250422092854_AddingScheduleTable2")]
    partial class AddingScheduleTable2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.ScheduleModel.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookedSeats")
                        .HasColumnType("int");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("RouteId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.BusModel.Bus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumBuses")
                        .HasColumnType("int");

                    b.Property<int>("StandardSpeed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("buses");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.CityModel.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusStopLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.CompanyModel.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.RouteModel.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrivalCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartureCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DistanceKm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TollCost")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalCityId");

                    b.HasIndex("DepartureCityId");

                    b.ToTable("routes");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.TicketModel.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("payments");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.TicketModel.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("BusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("RouteId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.UserModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Domain.Models.ScheduleModel.Schedule", b =>
                {
                    b.HasOne("SwiftBusAPI.Domain.Models.BusModel.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftBusAPI.Domain.Models.RouteModel.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.BusModel.Bus", b =>
                {
                    b.HasOne("SwiftBusAPI.Domain.Models.CompanyModel.Company", "Company")
                        .WithMany("Buses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.RouteModel.Route", b =>
                {
                    b.HasOne("SwiftBusAPI.Domain.Models.CityModel.City", "ArrivalCity")
                        .WithMany("ArrivalRoutes")
                        .HasForeignKey("ArrivalCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SwiftBusAPI.Domain.Models.CityModel.City", "DepartureCity")
                        .WithMany("DepartureRoutes")
                        .HasForeignKey("DepartureCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalCity");

                    b.Navigation("DepartureCity");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.TicketModel.Payment", b =>
                {
                    b.HasOne("SwiftBusAPI.Domain.Models.TicketModel.Ticket", "Ticket")
                        .WithOne("Payment")
                        .HasForeignKey("SwiftBusAPI.Domain.Models.TicketModel.Payment", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.TicketModel.Ticket", b =>
                {
                    b.HasOne("SwiftBusAPI.Domain.Models.BusModel.Bus", "Bus")
                        .WithMany("Tickets")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftBusAPI.Domain.Models.RouteModel.Route", "Route")
                        .WithMany("Tickets")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ScheduleModel.Schedule", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("SwiftBusAPI.Domain.Models.UserModel.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.ScheduleModel.Schedule", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.BusModel.Bus", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.CityModel.City", b =>
                {
                    b.Navigation("ArrivalRoutes");

                    b.Navigation("DepartureRoutes");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.CompanyModel.Company", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.RouteModel.Route", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.TicketModel.Ticket", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("SwiftBusAPI.Domain.Models.UserModel.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
